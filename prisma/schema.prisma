// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  username       String?   @unique
  name           String?
  gender         String?
  country        String?
  city           String?
  birthdate      DateTime?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts           Account[]
  posts              Post[]
  comments           Comment[]
  badgedPosts        BadgePost[]
  badgedComments     BadgeComment[]
  postVotes          PostVote[]
  commentVotes       CommentVote[]
  favouritePosts     FavouritePost[]
  favouriteComments  FavouriteComment[]
  actionedUsers      UserAction[]
  actionedByUsers    UserAction[]       @relation("UserActionedBy")
  followedCategories FollowedCategory[]
  actionedTags       TagAction[]
  votedUsers         UserVote[]
  userVotedBy        UserVote[]         @relation("UserVotedBy")
}

model UserVote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime @default(now())
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  authorId String   @db.ObjectId
  author   User     @relation("UserVotedBy", fields: [authorId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

type MemContainer {
  data String
  type String
}

model Post {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  addTime       DateTime       @default(now())
  title         String
  tagIds        String[]       @db.ObjectId
  tags          Tag[]          @relation(fields: [tagIds], references: [id])
  categoryId    String         @db.ObjectId
  category      Category?      @relation(fields: [categoryId], references: [id])
  memContainers MemContainer[]
  authorId      String         @db.ObjectId
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  accepted      Boolean        @default(false)

  comments      Comment[]
  badges        BadgePost[]
  votes         PostVote[]
  favouriteList FavouritePost[]
}

model PostVote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime @default(now())
  authorId String   @db.ObjectId
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId   String   @db.ObjectId
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, authorId])
}

model BadgePost {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime  @default(now())
  postId   String    @db.ObjectId
  type     BadgeType
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String    @db.ObjectId
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([postId, type, authorId])
}

model Comment {
  id            String             @id @default(auto()) @map("_id") @db.ObjectId
  addTime       DateTime           @default(now())
  postId        String             @db.ObjectId
  post          Post               @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId      String             @db.ObjectId
  author        User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  commentBadges BadgeComment[]
  commentVotes  CommentVote[]
  favouriteList FavouriteComment[]
  precedent     Comment?           @relation("CommentToComment", fields: [precedentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcomments   Comment[]          @relation("CommentToComment")
  precedentId   String?            @db.ObjectId
}

model CommentVote {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  addTime   DateTime        @default(now())
  type      CommentVoteType
  commentId String          @db.ObjectId
  comment   Comment         @relation(fields: [commentId], references: [id], onDelete: Cascade)
  authorId  String          @db.ObjectId
  author    User            @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([commentId, authorId])
}

model BadgeComment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  addTime   DateTime  @default(now())
  commentId String    @db.ObjectId
  type      BadgeType
  comment   Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  authorId  String    @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([commentId, type, authorId])
}

model Category {
  id         String             @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  nsfw       Boolean?
  slug       String             @unique
  order      Int?
  column     Int?
  parentId   String?            @db.ObjectId
  parent     Category?          @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children   Category[]         @relation("CategoryToCategory")
  posts      Post[]
  followedBy FollowedCategory[]
}

model Tag {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @unique
  postIds    String[]    @db.ObjectId
  posts      Post[]      @relation(fields: [postIds], references: [id])
  actionedBy TagAction[]
}

model FavouritePost {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime @default(now())
  postId   String   @db.ObjectId
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String   @db.ObjectId
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, postId])
}

model FavouriteComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime   DateTime @default(now())
  commentId String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, commentId])
}

model UserAction {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime       @default(now())
  method   UserActionType
  userId   String         @db.ObjectId
  user     User           @relation("UserActionedBy", fields: [userId], references: [id], onDelete: Cascade)
  authorId String         @db.ObjectId
  author   User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, userId])
}

model FollowedCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime    DateTime @default(now())
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  authorId   String   @db.ObjectId
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, categoryId])
}

model TagAction {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime       @default(now())
  method   UserActionType
  tagId    String         @db.ObjectId
  tag      Tag            @relation(fields: [tagId], references: [id], onDelete: Cascade)
  authorId String         @db.ObjectId
  author   User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, tagId])
}

model UserProfile {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  image           String?
  username        String
  createdAt       DateTime
  spears          Int
  posts           Int
  comments        Int
  rock            Int
  silver          Int
  gold            Int
  acceptedPosts   Int
  rank            Int
  email           String
}

model UserProfileInfo {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  image           String?
  username        String
  createdAt       DateTime
  posts           Int
  acceptedPosts   Int
  comments        Int
  email           String
}

model UserRanking {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  image           String?
  username        String
  spears          Int
  rank            Int
}

enum BadgeType {
  ROCK
  SILVER
  GOLD
}

enum CommentVoteType {
  PLUS
  MINUS
}

enum UserActionType {
  FOLLOW
  BLOCK
}