// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type Notifications {
  newOrders          Boolean @default(true)
  newMarks           Boolean @default(true)
  commentsOnHomePage Boolean @default(true)
  newComments        Boolean @default(true)
}

type Premium {
  picsCountOnPage           Int     @default(8)
  adminPostsOff             Boolean @default(false)
  commentsPicsGifsOff       Boolean @default(false)
  hideNegativeComments      Boolean @default(false)
  hideAds                   Boolean @default(true)
  hideProfile               Boolean @default(false)
  hidePremiumIcon           Boolean @default(false)
  hideLowReputationComments Boolean @default(false)
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  username       String?        @unique
  name           String?
  gender         Int?           @default(0)
  country        String?
  city           String?
  birthdate      DateTime?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  coins          Int            @default(0)
  token          String?
  tokenExpires   DateTime?
  notifications  Notifications?
  premiumExpires DateTime?
  premium        Premium?

  reported           Report[]
  accounts           Account[]
  actionedByUsers    UserAction[]         @relation("UserActionedBy")
  actionedUsers      UserAction[]         @relation("ActionedUsers")
  posts              Post[]
  comments           Comment[]
  badgedPosts        BadgePost[]
  postVotes          PostVote[]
  commentPlusVotes   CommentVotePlus[]
  commentMinusVotes  CommentVoteMinus[]
  commentRockVotes   CommentRockBadge[]
  commentSilverVotes CommentSilverBadge[]
  commentGoldVotes   CommentGoldBadge[]
  favouritePosts     FavouritePost[]
  favouriteComments  FavouriteComment[]
  actionedCategories CategoryAction[]
  actionedTags       TagAction[]
  votedUsers         UserVote[]
  userVotedBy        UserVote[]           @relation("UserVotedBy")
}

model UserVote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime @default(now())
  userId   String   @db.ObjectId
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  authorId String   @db.ObjectId
  author   User     @relation("UserVotedBy", fields: [authorId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

type MemContainer {
  data String
  type String
}

type LinkInformation {
  description String?
  domain      String?
  img         String?
  origin      String?
  title       String?
}

model Post {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  addTime       DateTime         @default(now())
  title         String
  slug          String
  tagIds        String[]         @db.ObjectId
  tags          Tag[]            @relation(fields: [tagIds], references: [id])
  categoryId    String           @db.ObjectId
  category      Category         @relation(fields: [categoryId], references: [id])
  memContainers MemContainer[]
  authorId      String           @db.ObjectId
  author        User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
  accepted      DateTime?
  link          LinkInformation?
  linkImage     String?

  comments      Comment[]
  reports       Report[]
  badges        BadgePost[]
  votes         PostVote[]
  favouriteList FavouritePost[]
}

model Report {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postId     String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  reporterId String   @db.ObjectId
  reporter   User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)
  addTime    DateTime @default(now())

  @@unique([postId, reporterId])
}

type TagType {
  id   String @map("_id") @db.ObjectId
  name String
  slug String
}

type CategoryParentType {
  id     String   @map("_id") @db.ObjectId
  name   String
  slug   String
  nsfw   Boolean?
  column Int?
  order  Int?
}

type CategoryType {
  id       String              @map("_id") @db.ObjectId
  name     String
  slug     String
  nsfw     Boolean?
  order    Int?
  column   Int?
  parentId String?             @db.ObjectId
  parent   CategoryParentType?
}

type AuthorType {
  id       String  @map("_id") @db.ObjectId
  username String
  image    String?
  spears   Int
  rank     Int
}

model PostStats {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  addTime       DateTime         @default(now())
  title         String
  slug          String
  tagIds        String[]         @db.ObjectId
  tags          TagType[]
  commentStats  CommentStats[]
  categoryId    String           @db.ObjectId
  category      CategoryType
  memContainers MemContainer[]
  authorId      String           @db.ObjectId
  author        AuthorType
  accepted      DateTime?
  link          LinkInformation?
  linkImage     String?
  comments      Int
  pluses        Int
  rock          Int
  silver        Int
  gold          Int
}

model PostVote {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime @default(now())
  authorId String   @db.ObjectId
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId   String   @db.ObjectId
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, authorId])
}

model BadgePost {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime  @default(now())
  postId   String    @db.ObjectId
  type     BadgeType
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String    @db.ObjectId
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([postId, type, authorId])
}

model Comment {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  addTime       DateTime             @default(now())
  postId        String               @db.ObjectId
  post          Post                 @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId      String               @db.ObjectId
  author        User                 @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content       String
  pluses        CommentVotePlus[]
  minuses       CommentVoteMinus[]
  rock          CommentRockBadge[]
  silver        CommentSilverBadge[]
  gold          CommentGoldBadge[]
  favouriteList FavouriteComment[]
  precedent     Comment?             @relation("CommentToComment", fields: [precedentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcomments   Comment[]            @relation("CommentToComment")
  precedentId   String?              @db.ObjectId
}

model CommentVotePlus {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  addTime      DateTime     @default(now())
  commentId    String       @db.ObjectId
  comment      Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  authorId     String       @db.ObjectId
  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  commentStats CommentStats @relation(fields: [commentId], references: [id])

  @@unique([commentId, authorId])
}

model CommentVoteMinus {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  addTime      DateTime     @default(now())
  commentId    String       @db.ObjectId
  comment      Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  authorId     String       @db.ObjectId
  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  commentStats CommentStats @relation(fields: [commentId], references: [id])

  @@unique([commentId, authorId])
}

model CommentRockBadge {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime   DateTime @default(now())
  commentId String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([commentId, authorId])
}

model CommentSilverBadge {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime   DateTime @default(now())
  commentId String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([commentId, authorId])
}

model CommentGoldBadge {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime   DateTime @default(now())
  commentId String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([commentId, authorId])
}

model Category {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  nsfw     Boolean?
  slug     String           @unique
  order    Int?
  column   Int?
  parentId String?          @db.ObjectId
  parent   Category?        @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Category[]       @relation("CategoryToCategory")
  postIds  String[]         @db.ObjectId
  posts    Post[]
  actions  CategoryAction[]
}

model Tag {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String      @unique
  postIds    String[]    @db.ObjectId
  posts      Post[]      @relation(fields: [postIds], references: [id])
  actionedBy TagAction[]
}

model FavouritePost {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime @default(now())
  postId   String   @db.ObjectId
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId String   @db.ObjectId
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, postId])
}

model FavouriteComment {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  addTime      DateTime     @default(now())
  commentId    String       @db.ObjectId
  comment      Comment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentStats CommentStats @relation(fields: [commentId], references: [id])
  authorId     String       @db.ObjectId
  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, commentId])
}

model UserAction {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  addTime     DateTime       @default(now())
  method      UserActionType
  userId      String         @db.ObjectId
  authorId    String         @db.ObjectId
  user        User           @relation("UserActionedBy", fields: [userId], references: [id], onDelete: Cascade)
  userRanking UserRanking    @relation(fields: [userId], references: [id])
  author      User           @relation("ActionedUsers", fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, userId])
}

model CategoryAction {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  addTime    DateTime       @default(now())
  categoryId String         @db.ObjectId
  category   Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  authorId   String         @db.ObjectId
  author     User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  method     UserActionType

  @@unique([authorId, categoryId])
}

model TagAction {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  addTime  DateTime       @default(now())
  method   UserActionType
  tagId    String         @db.ObjectId
  tag      Tag            @relation(fields: [tagId], references: [id], onDelete: Cascade)
  authorId String         @db.ObjectId
  author   User           @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([authorId, tagId])
}

model UserProfile {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  image          String?
  username       String
  createdAt      DateTime
  spears         Int
  posts          Int
  comments       Int
  rock           Int
  silver         Int
  gold           Int
  acceptedPosts  Int
  rank           Int
  premium        Premium
  premiumExpires DateTime?
}

model UserProfileInfo {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  image         String?
  username      String
  createdAt     DateTime
  posts         Int
  acceptedPosts Int
  comments      Int
}

model UserRanking {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  image      String?
  username   String
  spears     Int
  rank       Int
  comments   CommentStats[]
  actionedBy UserAction[]
}

enum BadgeType {
  ROCK
  SILVER
  GOLD
}

enum UserActionType {
  FOLLOW
  BLOCK
}

model CommentStats {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  addTime     DateTime           @default(now())
  postId      String             @db.ObjectId
  authorId    String             @db.ObjectId
  content     String
  author      UserRanking        @relation(fields: [authorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pluses      CommentVotePlus[]
  minuses     CommentVoteMinus[]
  favouriteBy FavouriteComment[]
  post        PostStats          @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  score       Int
  rock        Int
  silver      Int
  gold        Int
  precedent   CommentStats?      @relation("CommentToCommentx", fields: [precedentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcomments CommentStats[]     @relation("CommentToCommentx")
  precedentId String?            @db.ObjectId
}
